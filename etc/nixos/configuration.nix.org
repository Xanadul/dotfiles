#+TITLE:Xanaduls NixOS config
#+AUTHOR:Xanadul
#+STARTUP: showeverything
#+OPTIONS: toc:3
#+property: header-args :tangle configurationn.nix
#+auto_tangle: t


* :toc:
- [[#system][System]]
  - [[#bootloader][Bootloader]]
  - [[#locale][Locale]]
  - [[#zfs][ZFS]]
  - [[#networking][Networking]]
    - [[#smbsamba][SMB/SAMBA]]
    - [[#firewall][Firewall]]
- [[#gui][GUI]]
  - [[#sound][Sound]]
  - [[#desktop-environment][Desktop Environment]]
  - [[#printing][Printing]]
  - [[#flatpak][Flatpak]]
- [[#users][Users]]
  - [[#system-1][system]]
  - [[#xanadul][xanadul]]
    - [[#packages][Packages]]
- [[#password-manager][Password Manager]]
- [[#virtualisation][Virtualisation]]
  - [[#docker][Docker]]
- [[#system-state-version][System state version]]

* System
** Bootloader
Using Systemdboot on efi system. Could use grub, but doesn't seem neccessary rn.

#+begin_src nix
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+end_src

** Locale
#+begin_src nix 
  time.timeZone = "Europe/Berlin";

  i18n.defaultLocale = "en_GB.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_GB.UTF-8";
    LC_IDENTIFICATION = "de_DE.UTF-8";
    LC_MEASUREMENT = "de_DE.UTF-8";
    LC_MONETARY = "de_DE.UTF-8";
    LC_NAME = "de_DE.UTF-8";
    LC_NUMERIC = "de_DE.UTF-8";
    LC_PAPER = "de_DE.UTF-8";
    LC_TELEPHONE = "de_DE.UTF-8";
    LC_TIME = "de_DE.UTF-8";
  };
  
  # Configure console keymap
  console.keyMap = "de";
#+end_src

** ZFS
I'd like to use ZFS-Native mountpoints (defining them via #zfs set mountpoint=/mnt/Yukino Yukino), but that doesn't work (see first comment block below). Therefore, using "legacy mountpoints" instead, setting each one individiually.

#+begin_src nix
  boot.supportedFilesystems = [ "zfs" ];
  boot.zfs.forceImportRoot = false;
  networking.hostId = "f81a04b9";
  #for zfs-native mountpoints:  Properly imports Yukino, and should theoretically mount, but doesn't mount
  #boot.zfs.extraPools = [ "Yukino" ];
  #systemd.services.zfs-mount.enable = false;

  #for zfs-legacy mountpoints (like fstab):
  fileSystems."/mnt/Yukino" = {
    device = "Yukino";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data" = {
    device = "Yukino/Data";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Backups" = {
    device = "Yukino/Data/Backups";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media" = {
    device = "Yukino/Data/Media";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Anime" = {
    device = "Yukino/Data/Media/Anime";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Anime/Ecchi" = {
    device = "Yukino";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Appstuff" = {
    device = "Yukino/Data/Media/Appstuff";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Documents" = {
    device = "Yukino/Data/Media/Documents";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Downloads" = {
    device = "Yukino/Data/Media/Downloads";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Music" = {
    device = "Yukino/Data/Media/Music";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/NSFW" = {
    device = "Yukino/Data/Media/NSFW";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Pictures" = {
    device = "Yukino/Data/Media/Pictures";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/TV" = {
    device = "Yukino/Data/Media/TV";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Nextcloud" = {
    device = "Yukino/Data/Nextcloud";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/University" = {
    device = "Yukino/Data/University";
    fsType = "zfs";
  };
#+end_src

** Networking
#+begin_src nix
  # Enable networking
  networking.networkmanager.enable = true;
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  
  networking.hostName = "nixos"; # Define your hostname.
  networking.extraHosts =
    ''
      100.71.109.130 hanako.ts
    '';
  
  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;
  services.tailscale.enable = true;
#+end_src

*** SMB/SAMBA
#+begin_src nix
  #Samba
  services.samba-wsdd.enable = true; # make shares visible for windows 10 clients
  services.samba = {
    enable = true;
    securityType = "user";
    extraConfig = ''
      workgroup = WORKGROUP
      server string = smbnix
      netbios name = smbnix
      security = user 
      #use sendfile = yes
      #max protocol = smb2
      # note: localhost is the ipv6 localhost ::1
      hosts allow = 192.168.1. 127.0.0.1 localhost
      hosts deny = 0.0.0.0/0
      guest account = nobody
      map to guest = bad user
    '';
    shares = {
      anime = {
        path = "/mnt/Yukino/Data/Media/Anime";
        browseable = "yes";
        "read only" = "yes";
        "guest ok" = "no";
        "valid users" = "xanadul";
      };
    };
  };
#+end_src

*** Firewall
Some ports to consider:
| Port      | Service                    |
|-----------+----------------------------|
| Dockers   |                            |
|           |                            |
| TCP 8380  | searxng                    |
| TCP 5232  | CalDAV (Radicale)          |
| TCP 3443  | Git-https                  |
| TCP 3080  | Git-http                   |
| TCP 8080  | qBittorrentvpn (Binhex)    |
| TCP 32774 | nginx.legion774.net        |
|-----------+----------------------------|
| Native    |                            |
|           |                            |
| UDP 41641 | Tailscale                  |
| TCP 5357  | Tailscale                  |
|           |                            |
| UDP 3702  | WSD (WebServicesDiscovery) |
| TCP 5357  | WSD-http                   |
| TCP 5358  | WSD-https                  |
|           | (Needed for Samba)         |
|-----------+----------------------------|


#+begin_src nix
  networking.firewall.enable = true;
  
  networking.firewall.allowedUDPPorts = [ 
    41641
    3702 # wsdd/samba
  ];
  networking.firewall.allowedTCPPorts = [
    5357 # wsdd/samba
    32774 # nginx.legion774.net
  ];

  networking.firewall.checkReversePath = "loose";
#+end_src

* GUI
** Sound
#+begin_src nix
  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;

      # use the example session manager (no others are packaged yet so this is enabled by default,
      # no need to redefine it in your config for now)
      #media-session.enable = true;
    };
#+end_src

** Desktop Environment
#+begin_src nix
  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  #programs.sway.enable = true;
  # Configure keymap in X11
  services.xserver = {
    layout = "de";
    xkbVariant = "";
  };
  
  programs.hyprland = {
    enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;


  xdg.portal.enable = true;

#+end_src

** Printing
#+begin_src nix
  # Enable CUPS to print documents.
  services.printing.enable = true;
#+end_src

** Flatpak
#+begin_src nix
  services.flatpak.enable = true;
#+end_src

 
* Users 
** system
#+begin_src nix
  programs.zsh.enable = true;
  users.defaultUserShell = pkgs.zsh;
  
  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    libsForQt5.qtstyleplugin-kvantum
    libsForQt5.qt5ct
    dracula-theme
    vim
    lsd
    lf
    ydotool
    neovim
    wget
    btop

    git
    emacs
    ripgrep
    coreutils
    fd
    clang

    zsh
    wtype
    gnupg
    pinentry-curses
    pinentry
    pinentry-rofi
    pinentry-qt
    tailscale
    
    emacs-all-the-icons-fonts

    docker-compose
  ];
#+end_src

** xanadul
#+begin_src nix

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.xanadul = {
    isNormalUser = true;
    description = "xanadul";
    extraGroups = [ "networkmanager" "wheel" ];
#+end_src
*** Packages
#+begin_src nix
    packages = with pkgs; [
      qutebrowser
      firefox
      kate
      rofi-wayland
      waybar
      tessen
      wl-clipboard
      cliphist
      swaybg
      wf-recorder
      pamixer
      themechanger
      pass-wayland
      alacritty
      wezterm
      kitty
      lxde.lxsession
      slurp
      jetbrains-mono
      jq
      cmake
      gnumake
      gcc
      python3
      telegram-desktop
      steam
      protonup-qt
      lutris
      thunderbird

      jetbrains-mono
      ubuntu_font_family
      emacsPackages.vterm
    ];
  };
#+end_src

* Password Manager
#+begin_src nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    pinentryFlavor = "qt";
    enableSSHSupport = true;
  };
  services.pcscd.enable = true;
#+end_src
* Virtualisation
** Docker
#+begin_src 
  virtualisation.docker.enable = true;
#+end_src

* System state version
Don't change, except on new NixOS installations (to the value of the installation).

This value determines the NixOS release from which the default
settings for stateful data, like file locations and database versions
on your system were taken. It‘s perfectly fine and recommended to leave
this value at the release version of the first install of this system.
Before changing this value read the documentation for this option
(e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
#+begin_src nix 
  system.stateVersion = "23.05";
}
#+end_src  
