# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ inputs, config, pkgs, ... }:

{
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  imports =
    [ # Include the results of the hardware scan.
      /etc/nixos/hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  
  #ZFS
  boot.supportedFilesystems = [ "zfs" ];
  boot.zfs.forceImportRoot = false;
  networking.hostId = "f81a04b9";
  #for zfs-native mountpoints:  Properly imports Yukino, and should theoretically mount, but doesn't mount
  #boot.zfs.extraPools = [ "Yukino" ];
  #systemd.services.zfs-mount.enable = false;

  #for zfs-legacy mountpoints (like fstab):
  fileSystems."/mnt/Yukino" = {
    device = "Yukino";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data" = {
    device = "Yukino/Data";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Backups" = {
    device = "Yukino/Data/Backups";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media" = {
    device = "Yukino/Data/Media";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Anime" = {
    device = "Yukino/Data/Media/Anime";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Anime/Ecchi" = {
    device = "Yukino";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Appstuff" = {
    device = "Yukino/Data/Media/Appstuff";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Documents" = {
    device = "Yukino/Data/Media/Documents";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Downloads" = {
    device = "Yukino/Data/Media/Downloads";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Music" = {
    device = "Yukino/Data/Media/Music";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/NSFW" = {
    device = "Yukino/Data/Media/NSFW";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/Pictures" = {
    device = "Yukino/Data/Media/Pictures";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Media/TV" = {
    device = "Yukino/Data/Media/TV";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/Nextcloud" = {
    device = "Yukino/Data/Nextcloud";
    fsType = "zfs";
  };
  fileSystems."/mnt/Yukino/Data/University" = {
    device = "Yukino/Data/University";
    fsType = "zfs";
  };
  

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Berlin";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_GB.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_GB.UTF-8";
    LC_IDENTIFICATION = "de_DE.UTF-8";
    LC_MEASUREMENT = "de_DE.UTF-8";
    LC_MONETARY = "de_DE.UTF-8";
    LC_NAME = "de_DE.UTF-8";
    LC_NUMERIC = "de_DE.UTF-8";
    LC_PAPER = "de_DE.UTF-8";
    LC_TELEPHONE = "de_DE.UTF-8";
    LC_TIME = "de_DE.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  #programs.sway.enable = true;
  # Configure keymap in X11
  services.xserver = {
    layout = "de";
    xkbVariant = "";
  };

  # Configure console keymap
  console.keyMap = "de";

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;
  

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.xanadul = {
    isNormalUser = true;
    description = "xanadul";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      qutebrowser
      firefox
      kate
      rofi-wayland
      #bemenu
      waybar
      tessen
      wl-clipboard
      cliphist
      swaybg
      wf-recorder
      pamixer
      themechanger
      pass-wayland
      alacritty
      wezterm
      kitty
      lxde.lxsession
      slurp
      jetbrains-mono
      jq
      cmake
      gnumake
      gcc
      python3
      telegram-desktop
      steam
      protonup-qt
      lutris
      thunderbird

      jetbrains-mono
      ubuntu_font_family
      emacsPackages.vterm
    ];
  };

  users.defaultUserShell = pkgs.zsh;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    libsForQt5.qtstyleplugin-kvantum
    libsForQt5.qt5ct
    dracula-theme
    vim
    lsd
    lf
    ydotool
    neovim
    wget
    btop

    git
    emacs
    ripgrep
    coreutils
    fd
    clang

    zsh
    wtype
    gnupg
    pinentry-curses
    pinentry
    pinentry-rofi
    pinentry-qt
    tailscale
    
    emacs-all-the-icons-fonts

    docker-compose
  ];


  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    pinentryFlavor = "qt";
    enableSSHSupport = true;
  };
  services.pcscd.enable = true;
  services = {
    pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;

      # use the example session manager (no others are packaged yet so this is enabled by default,
      # no need to redefine it in your config for now)
      #media-session.enable = true;
    };
    flatpak.enable = true;
  };
  programs.zsh.enable = true;
  programs.hyprland = {
    enable = true;
  };
  xdg.portal.enable = true;

  #Samba
  services.samba-wsdd.enable = true; # make shares visible for windows 10 clients
services.samba = {
  enable = true;
  securityType = "user";
  extraConfig = ''
    workgroup = WORKGROUP
    server string = smbnix
    netbios name = smbnix
    security = user 
    #use sendfile = yes
    #max protocol = smb2
    # note: localhost is the ipv6 localhost ::1
    hosts allow = 192.168.1. 127.0.0.1 localhost
    hosts deny = 0.0.0.0/0
    guest account = nobody
    map to guest = bad user
  '';
  shares = {
    anime = {
      path = "/mnt/Yukino/Data/Media/Anime";
      browseable = "yes";
      "read only" = "yes";
      "guest ok" = "no";
      "valid users" = "xanadul";
    };
  };
};



  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;
  services.tailscale.enable = true;
  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  networking.firewall.allowedUDPPorts = [ 
    41641
    3702 # wsdd/samba
    32774
  ];
  networking.firewall.allowedTCPPorts = [
    5357 # wsdd/samba
    32774 # nginx.legion774.net
  ];

  # Or disable the firewall altogether.
  networking.firewall.enable = true;
  networking.firewall.checkReversePath = "loose";
  networking.extraHosts =
    ''
      100.71.109.130 hanako.ts
    '';

  # Docker
  virtualisation.docker.enable = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}
