zstyle :compinstall filename "${HOME}/.zshrc"
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' #Case insensitive completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
autoload -Uz compinit promptinit

# p10k is nice, but since it puts content on the right edge, spams window on resize...
#znap source romkatv/powerlevel10k
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh

# Starship prompt
eval "$(starship init zsh)"

################################################################################
# Path
################################################################################

path+=("${HOME}/.local/bin")
path+=("${HOME}/.emacs.d/bin")
path+=("${HOME}/go/bin") #for software installed with "go install"
path+=("${HOME}/.cargo/bin")
path+=("${HOME}/.development/flutter/bin")
path+=("${HOME}/.flutter")
path+=("${HOME}/.flutter/bin")
path+=("${HOME}/.local/podman/bin")
path+=("${HOME}/.cabal/bin")
path+=("${HOME}/.ghcup/bin")
path+=("${HOME}/.dotnet/")
path+=('/var/lib/flatpak/exports/bin')

################################################################################
# Environment Variables
################################################################################

export LBIN=~/.local/bin
export SCREENSHOTS=~/Pictures/Screenshots
export PAGER=moar
export CS=~/University/ComputerScience/2024-WS/
# export FZF_DEFAULT_OPTS="--preview-window 'right:60%:nohidden'" #preview hidden by default?!?!
export FZF_DEFAULT_OPTS="--preview '~/.config/fzf/preview.sh {}' --layout=reverse --inline-info --preview-window=nohidden"
export MANPAGER="nvim +Man!"
export ZSHCONFDIR="${HOME}/.config/zsh"

################################################################################
# Pyenv
################################################################################

# ~/.zprofile (for login shells)
# and ~/.zshrc (for interactive shells) :

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

# Restart your shell for the changes to take effect.

################################################################################
# Aliases
################################################################################

alias s='source ~/.zshrc'

function lf() { #yes, lf is a different program, but muscle memory dictates this name. Also, "ya" is a terrible combination on Colmak
	local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

alias rp="rsync -rah --info=progress2"


which eza >/dev/null 2>/dev/null;
if [[ $? == 0 ]]; then
  alias ls="eza --group-directories-first --icons always"
  alias la="eza --group-directories-first --icons always --all"
  alias l.="eza -d .*"
  alias ll="eza --long --icons always --group-directories-first --dereference --links --git --time-style='+%Y年%b月%d日 %H時%M分%S秒' --header"
  alias ld="eza --only-dirs --icons always"
  alias lla="eza --long --all --icons always --group-directories-first --dereference --links --git --time-style='+%Y年%b月%d日 %H時%M分%S秒 ' --header"
  alias lt="eza --tree --level=2 --icons always"
  alias tree="eza --tree --icons always"
else
  alias ls="ls --color=auto --group-directories-first"
  alias l.="ls -d .*"
  alias la="ls -a --group-directories-first"
  alias ll="ls -l --group-directories-first --header"
  alias lla="ls -la --group-directories-first --header"
fi

alias mkdir="mkdir --parents --verbose"

take ()
{
  mkdir --parents --verbose "${1}"
  cd "${1}"
}

alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias 4.='cd ../../../../'
alias .....='cd ../../../../'
alias 5.='cd ../../../../..'


alias vim="nvim"
# alias mpv="kitty mpv $1"
#
which rg >/dev/null 2>/dev/null;
if [[ $? == 0 ]]; then
  alias grep='rg'
else
  alias grep="grep --color=auto"
fi

alias lgit="lazygit"
alias ldocker="lazydocker"
alias dragon="dragon-drop"
which bat >/dev/null 2>/dev/null;
if [[ $? != 0 ]]; then
    alias bat="batcat"
fi

_fancyDiff(){
  diff -u "${@}" | diff-so-fancy
}
which diff-so-fancy >/dev/null 2>/dev/null;
if [[ $? == 0 ]]; then
  alias diff=_fancyDiff
fi

alias mount='mount | column -t'
#alias emacs="emacsclient -c -a 'emacs'"
#alias emacst="emacsclient -c -a 'emacs' -t"
alias dr="emacsclient ./"
alias emacst="emacs -t"

# Show open Ports
alias ports='netstat -tulanp'

# Safety nets
alias rm='rm -I --preserve-root'
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'

alias df='df -hT'
alias du='du -ch'


# Download a playlist into ./playlist-name/ and write metadata to files
alias yt-dlp-p='yt-dlp -o "%(playlist_title)s/%(playlist_index)s-%(title)s" --write-description --write-info-json --write-playlist-metafiles'

# Download a playlist into ./playlist-name/ , extract its audio to wav using best quality and write metadata to files
alias yt-dlp-p-aw='yt-dlp -o "%(playlist_title)s/%(playlist_index)s-%(title)s" --extract-audio --audio-format wav --audio-quality 0 --write-description --write-info-json --write-playlist-metafiles'
alias yt-dlp-p-af='yt-dlp -o "%(playlist_title)s/%(playlist_index)s-%(title)s" --extract-audio --audio-format flac --embed-thumbnail --audio-quality 0 --write-description --write-info-json --write-playlist-metafiles'
alias yt-dlp-p-af-noIdx='yt-dlp -o "%(playlist_title)s/%(title)s" --extract-audio --audio-format flac --embed-thumbnail --audio-quality 0 --write-description --write-info-json --write-playlist-metafiles'
alias yt-dlp-p-aw-noIdx='yt-dlp -o "%(playlist_title)s/%(title)s" --extract-audio --audio-format wav --embed-thumbnail --audio-quality 0 --write-description --write-info-json --write-playlist-metafiles'

alias yt-dlp-aw='yt-dlp -o "%(title)s" --extract-audio --audio-format wav --audio-quality 0 --write-description --write-info-json --write-playlist-metafiles'
alias yt-dlp-af='yt-dlp -o "%(title)s" --extract-audio --audio-format flac --audio-quality 0 --embed-thumbnail --write-description --write-info-json --write-playlist-metafiles'


alias bcrypt-hash='f() {htpasswd -nbBC 10 $1 $2};f'

####
#Git
####
alias gs='git status'
alias gd="git diff --output-indicator-new=' ' --output-indicator-old=' '"
alias gds="git diff --staged"
alias ga="git add"
alias gap="git add --patch"
alias gc="git commit"
alias gp="git pull"
alias gP="git push"
alias gl="git log --all --graph --pretty=format:'%C(magenta)%h %C(white) %an  %ar%C(auto)  %D%n%s%n'"
alias gb="git branch"
alias gcl="git clone"
alias gco="git checkout"
alias gsw="git switch"


################################################################################
# Usability Misc
################################################################################

#eval "$(zoxide init --cmd cd zsh)"

# from https://github.com/mdumitru/fancy-ctrl-z
# suspend a program with ctrl-z and return to it using ctrl-z (as opposed to the fg command)
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line -w
  else
    zle push-input -w
    zle clear-screen -w
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z


bindkey "^[[3~" delete-char

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=10000
setopt notify

#If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
setopt HIST_IGNORE_ALL_DUPS

#fix multi instance history
setopt inc_append_history #save every command before it is executed to history.

################################################################################
# Plugins
################################################################################

[[ -f ~/Git/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap

source ~/Git/zsh-snap/znap.zsh  # Start Znap





#znap source marlonrichert/zsh-autocomplete

#bindkey "$terminfo[ht]" menu-complete "$terminfo[kcbt]" reverse-menu-complete

#bindkey "$terminfo[ht]" menu-select "$terminfo[kcbt]" menu-select
#bindkey -M menuselect "$terminfo[ht]" menu-complete "$terminfo[kcbt]" reverse-menu-complete

# all Tab widgets
#zstyle ':autocomplete:*complete*:*' insert-unambiguous yes

# all history widgets
#zstyle ':autocomplete:*history*:*' insert-unambiguous yes

# ^S
#zstyle ':autocomplete:menu-search:*' insert-unambiguous yes

#zstyle ':autocomplete:*' default-context history-incremental-search-backward

# Autocompletion
#zstyle -e ':autocomplete:list-choices:*' list-lines 'reply=( $(( LINES / 3 )) )'

# Override history search.
#zstyle ':autocomplete:history-incremental-search-backward:*' list-lines 10

# History menu.
#zstyle ':autocomplete:history-search-backward:*' list-lines 10

znap source zsh-users/zsh-autosuggestions

znap source hlissner/zsh-autopair

znap source unixorn/fzf-zsh-plugin # awesome history fuzzyfind, using ctrl+r

znap source Aloxaf/fzf-tab

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview commands for various commands
zstyle ':fzf-tab:complete:ls:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:complete:vim:*' fzf-preview 'bat $realpath'
zstyle ':fzf-tab:complete:nvim:*' fzf-preview 'bat $realpath'
# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
# zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 #--bind=tab:accept
# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts no
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'


# znap source jeffreytse/zsh-vi-mode

znap source zsh-users/zsh-syntax-highlighting

#source ~/.config/zsh/catppuccin_latte-zsh-syntax-highlighting.zsh
source ~/.config/zsh/dracula-zsh-syntax-highlighting.sh
#source ~/.config/zsh/catppuccin_latte-zsh-syntax-highlighting.zsh


znap source zsh-users/zsh-history-substring-search
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

if [ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]; then source ${HOME}/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
