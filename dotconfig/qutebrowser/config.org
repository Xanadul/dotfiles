#+TITLE:Xanaduls Qutebrowser config
#+AUTHOR:Xanadul
#+STARTUP: showeverything
#+OPTIONS: toc:3
#+property: header-args :tangle config.py
#+auto_tangle: t

Documentation:
  qute://help/configuring.html
  qute://help/settings.html

* :toc:
- [[#myvariables][MyVariables]]
  - [[#colors][Colors]]
- [[#autoconfig][Autoconfig]]
- [[#adblock][Adblock]]
- [[#theme][Theme]]
  - [[#dracula][Dracula]]
  - [[#elia][Elia]]
  - [[#catppuccin][Catppuccin]]
  - [[#fonts][Fonts]]
    - [[#family][Family]]
    - [[#size][Size]]
    - [[#situations][Situations]]
- [[#engine-settings][Engine Settings]]
  - [[#cookies][Cookies]]
  - [[#user-agent][User Agent]]
  - [[#javascript][JavaScript]]
  - [[#imagesvideos][Images/Videos]]
  - [[#notifications][Notifications]]
  - [[#downloads][Downloads]]
  - [[#zoom][Zoom]]
  - [[#sites][Sites]]
    - [[#search][Search]]
    - [[#homepage][Homepage]]
- [[#session][Session]]
- [[#keybinds][Keybinds]]
  - [[#command-aliases][Command Aliases]]
  - [[#unbind-defaults][Unbind defaults]]
  - [[#rofidmenu][Rofi/Dmenu]]
  - [[#normal-mode][Normal mode]]
  - [[#hints][Hints]]
  - [[#toggles][Toggles]]
  - [[#tabsbuffers][Tabs/Buffers]]
- [[#hinting][Hinting]]
- [[#tabs][Tabs]]
- [[#statusbar][Statusbar]]

* MyVariables
** Colors
The colors of the Dracula theme
#+begin_src python
#colors = {
#"bg":     '#282a36',
#"cl":     '#44475a',
#"fg":     '#f8f8f2',
#"comm":   '#6272a4',
#"cyan":   '#8be9fd',
#"green":  '#50fa7b',
#"orange": '#ffb86c',
#"pink":   '#ff79c6',
#"purple": '#bd93f9',
#"red":    '#ff5555',
#"yellow": '#f1fa8c'
#}
colors = {
"bg":     '#fffbfc',
"cl":     '#44475a',
"fg":     '#f8f8f2',
"comm":   '#6272a4',
"cyan":   '#8be9fd',
"green":  '#50fa7b',
"orange": '#ffb86c',
"pink":   '#0079c6',
"purple": '#0093f9',
"red":    '#ff5555',
"yellow": '#f1fa8c'
}

#+end_src

* Autoconfig
#+begin_src python
config.load_autoconfig(True)
#+end_src

* Adblock
#+begin_src python
#adblock-update

#+end_src

* Theme
** Dracula
#+begin_src python

import dracula.draw
dracula.draw.blood(c, {
    'spacing': {
        'vertical': 6,
        'horizontal': 8
    }
})
config.set('colors.webpage.preferred_color_scheme' ,'dark')

#+end_src

** Elia
#+begin_src python

#import elia.draw
#elia.draw.cola(c, {
#    'spacing': {
#        'vertical': 6,
#        'horizontal': 8
#    }
#})
#config.set('colors.webpage.preferred_color_scheme' ,'light')

#+end_src

** Catppuccin
#+begin_src python
#import catppuccin
#catppuccin.setup(c, 'latte', True)
#config.set('colors.webpage.preferred_color_scheme' ,'light')

#+end_src

** Fonts
*** Family
Default font families to use. Whenever "default_family" is used in a font setting, it's replaced with the fonts listed here. If set to an empty value, a system-specific monospace default is used.
Type: List of Font, or Font
#+begin_src python
c.fonts.default_family = '"Source Code Pro"'
#+end_src

*** Size
Default font size to use. Whenever "default_size" is used in a font setting, it's replaced with the size listed here. Valid values are either a float value with a "pt" suffix, or an integer value with a "px" suffix.
Type: String
#+begin_src python
c.fonts.default_size = '14pt'
#+end_src


*** Situations
#+begin_src python
c.fonts.completion.entry = 'default_size Source Code Pro'

c.fonts.debug_console = 'default_size Source Code Pro'

c.fonts.prompts = 'default_size sans-serif'

c.fonts.statusbar = 'default_size "Source Code Pro"'
#+end_src


* Engine Settings
** Cookies
Which cookies to accept. With QtWebEngine, this setting also controls
other features with tracking capabilities similar to those of cookies;
including IndexedDB, DOM storage, filesystem API, service workers, and
AppCache. Note that with QtWebKit, only `all` and `never` are
supported as per-domain values. Setting `no-3rdparty` or `no-
unknown-3rdparty` per-domain on QtWebKit will have the same effect as
`all`.
Type: String
Valid values:
  - all: Accept all cookies.
  - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
  - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
  - never: Don't accept cookies at all.
#+begin_src python
config.set('content.cookies.accept', 'no-3rdparty')
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
config.set('content.cookies.accept', 'all', 'devtools://*')
#+end_src

** User Agent
User agent to send.  The following placeholders are defined:  
- `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`: The underlying WebKit version (set to a fixed value   with QtWebEngine).
- `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for QtWebEngine. 
- `{qt_version}`: The underlying Qt version. 
- `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for QtWebEngine. 
- `{upstream_browser_version}`: The corresponding Safari/Chrome version. 
- `{qutebrowser_version}`: The currently running qutebrowser version.  The default value is equal to the unchanged user agent of QtWebKit/QtWebEngine.  Note that the value read from JavaScript is always the global value. With QtWebEngine between 5.12 and 5.14 (inclusive), changing the value exposed to JavaScript requires a restart.

Type: FormatString
#+begin_src python
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:109.0) Gecko/20100101 Firefox/115.0', 'https://accounts.google.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:109.0) Gecko/20100101 Firefox/115.0', 'https://docs.google.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:109.0) Gecko/20100101 Firefox/115.0', 'https://drive.google.com/*')
#+end_src

** JavaScript
#+begin_src python
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

config.set('content.javascript.enabled', True, 'https://192.168.1.2/3003')

config.set('content.javascript.clipboard', "access")
#+end_src

** Images/Videos
Load images automatically in web pages.
#+begin_src python
config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')
config.set('content.autoplay', False)
#+end_src

** Notifications
Allow websites to show notifications.
Type: BoolAsk
Valid values:
  - true
  - false
  - ask
#+begin_src python
config.set('content.notifications.enabled', True, 'https://www.youtube.com')
#+end_src

** Downloads
Directory to save downloads to. If unset, a sensible OS-specific default is used.
Type: Directory

#+begin_src python
c.downloads.location.directory = '~/Downloads'
#+end_src

** Zoom
Default zoom set to 150% for 55" Screen

#+begin_src pyhton
config.set('zoom.default', "150%")
#+end_src

** Sites 
*** Search
Search engines which can be used via the address bar.  Maps a search engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}` placeholder. The placeholder will be replaced by the search term, use `{{` and `}}` for literal `{`/`}` braces.  The following further placeholds are defined to configure how special characters in the search terms are replaced by safe characters (called 'quoting'):  
- `{}` and `{semiquoted}` quote everything except slashes; this is the most   sensible choice for almost all search engines (for the search term   `slash/and&amp` this placeholder expands to `slash/and%26amp`). 
- `{quoted}` quotes all characters (for `slash/and&amp` this placeholder   expands to `slash%2Fand%26amp`). 
- `{unquoted}` quotes nothing (for `slash/and&amp` this placeholder   expands to `slash/and&amp`).  
The search engine named `DEFAULT` is used when `url.auto_search` is turned on and something else than a URL was entered to be opened. Other search engines can be used by prepending the search engine name to the search term, e.g. `:open google qutebrowser`.
Type: Dict
#+begin_src python
c.url.searchengines = {
#'DEFAULT': 'hanako.ts:8380/search?q={}&category_general=1&language=en-US&time_range=&safesearch=0&theme=simple',
      'DEFAULT': 'https://search.brave.com/search?q={}&source=web',
'ar': 'https://www.amazon.com/s?k={}',
'aw': 'https://wiki.archlinux.org/?search={}',
'ge': 'https://wiki.gentoo.org/index.php?title=Special%3ASearch&search={}&go=Go',
'goog': 'https://www.google.com/search?q={}',
're': 'https://www.reddit.com/r/{}',
'ub': 'https://www.urbandictionary.com/define.php?term={}',
'wiki': 'https://en.wikipedia.org/wiki/{}',
'yt': 'https://www.youtube.com/results?search_query={}'
}

#+end_src

*** Homepage
Setting default page for when opening new tabs or new windows with commands like :open -t and :open -w .
#+begin_src python
c.url.default_page = 'mikoto.ts:3003'
c.url.start_pages = 'mikoto.ts:3003'
#+end_src

* Session
Restoring session on startup and loading restored tabs only once they are opened.
#+begin_src python
config.set('auto_save.session', True)

config.set('session.lazy_restore', True)
#+end_src

* Keybinds
** Command Aliases
for commands like :quit
#+begin_src python
c.aliases = {
'q': 'quit',
'w': 'session-save',
'wq': 'quit --save'
}
#+end_src

** Unbind defaults
Since I don't want to accidentally execute random commands, not even starting with Space (my leader key), I unbind every single default binding...
#+begin_src python
config.unbind('H')
config.unbind('sk')
config.unbind('M')
config.unbind('Sq')
config.unbind('gb')
config.unbind('<Ctrl+Shift+w>')
config.unbind('wi')
config.unbind('wIf')
config.unbind('gd')
config.unbind('ad')
config.unbind('cd')
config.unbind('L')
config.unbind('Sh')
config.unbind('<Ctrl+h>')
config.unbind('q')
config.unbind('@')
config.unbind('<Ctrl+Shift+Tab>')
config.unbind('o')
config.unbind('b')
config.unbind('m')
config.unbind('ZQ')
config.unbind('<Ctrl+q>')
config.unbind('<Ctrl+Alt+p>')
config.unbind('sf')
config.unbind('ss')
config.unbind('Ss')
config.unbind('<Ctrl+s>')
config.unbind('gC')
config.unbind('d')
config.unbind('<Ctrl+w>')
config.unbind('T')
config.unbind('gD')
config.unbind('gm')
config.unbind('<Alt+m>')
config.unbind('J')
config.unbind('<Ctrl+PgDown>')
config.unbind('co')
config.unbind('<Ctrl+p>')
config.unbind('K')
config.unbind('<Ctrl+PgUp>')
config.unbind('gt')
config.unbind('<Ctrl+Shift+t>')
config.unbind('gf')

#These are all bound to "reload" by default.... WHYYYYY?
config.unbind('tsu')
config.unbind('tsh')
config.unbind('tpu')
config.unbind('tiu')
config.unbind('tih')
config.unbind('tcu')
config.unbind('tch')
config.unbind('tph')
config.unbind('tcH')
config.unbind('tiH')
config.unbind('tpH')
config.unbind('tsH')
config.unbind('tCh')
config.unbind('tCu')
config.unbind('tCH')
config.unbind('tIh')
config.unbind('tIu')
config.unbind('tIH')
config.unbind('tPh')
config.unbind('tPu')
config.unbind('tPH')
config.unbind('tSh')
config.unbind('tSu')
config.unbind('tSH')
#+end_src

** Rofi/Dmenu 
# Bindings to use dmenu rather than qutebrowser's builtin search.
#config.bind('o', 'spawn --userscript dmenu-open')
#config.bind('O', 'spawn --userscript dmenu-open --tab')

** Normal mode

#+begin_src python
config.bind('<Space><Space>', 'cmd-set-text -s :') #open in this tab
config.bind('<Space>.', 'cmd-set-text -s :open ') #open in this tab
config.bind('<Space>t', 'cmd-set-text -s :open -t') #open in new tab
config.bind('<Space>n', 'cmd-set-text -s :open -t') #open in new tab
#+end_src

** Hints
#+begin_src python
config.bind('<Space>fm', 'hint links spawn umpv {hint-url}')
config.bind('<Space>fM', 'hint links spawn mpv {hint-url}')
config.bind('<Space>fy', 'hint links spawn alacritty -e yt-dlp {hint-url}')
#+end_src

** Toggles
#+begin_src python
config.bind('<Space>ts', 'config-cycle statusbar.show never always')
config.bind('<Space>tt', 'config-cycle tabs.show never always')
config.bind('<Space>ta', 'config-cycle statusbar.show never always;; config-cycle tabs.show always never')
#+end_src

** Tabs/Buffers
#+begin_src python
config.bind('<Space>bb', 'set-cmd-text -s :tab-select ')
config.bind('<Space>bc', 'tab-close')
config.bind('<Space>bd', 'tab-close')
config.bind('D', 'tab-close')

config.bind('<Shift+Left>', 'back')
config.bind('<Shift+Backspace>', 'back')
config.bind('<Shift+Right>', 'forward')
#+end_src


* Hinting
Hinting spawns letters at every clickable element, for keyboard navigation. I set it to be comfortable on my ColmakXan layout.

#+begin_src python
config.set('hints.chars','tnseriao')

c.colors.hints.bg = colors["bg"]
c.colors.hints.fg = colors["pink"]
#c.colors.hints.match.fg = '#98be65'
c.colors.hints.match.fg = colors["green"]

config.set('fonts.hints', 'bold 18pt JetBrainsMono')

#+end_src

* Tabs

#+begin_src python
config.set('tabs.show', 'always')
config.set('tabs.position', 'left')

config.set('tabs.max_width', 350)
config.set('tabs.width', '12%')

config.set('tabs.select_on_remove', 'prev')

config.set('tabs.title.format', '{index}{audio}:  {current_title}')
config.set('fonts.tabs.unselected', '12pt default_family')
#+end_src

* Statusbar

#+begin_src python
config.set('statusbar.padding', {"bottom":6, "left": 8, "right": 8, "top": 6})
config.set('statusbar.widgets', ["keypress", "url", "scroll", "history", "tabs", "progress"])
#+end_src
